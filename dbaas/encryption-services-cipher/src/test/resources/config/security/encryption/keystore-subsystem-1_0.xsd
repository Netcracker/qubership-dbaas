
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="urn:nc:encryption:keystore:1.0"
            xmlns="urn:nc:encryption:keystore:1.0"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="1.0">

    <xsd:complexType name="subsystemType">
        <xsd:sequence>
            <xsd:element name="keystores" type="listKeyStoreType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="default-keystore" type="xsd:IDREF" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        An unique reference to the keystore by name that should be use like default KeyStore.
                        If not specify by default will be use first KeyStore.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType abstract="true" name="keystoreType">
        <xsd:sequence>
            <xsd:element name="keys" type="keyListType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        List of keys with provided information.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:ID" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    Unique name for key store. Name allow administrator detect where problem occurs
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="deprecated" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Shows whether keystore is deprecated or not.
                    This attribute is set manually with 'true' if keystore shouldn't be used anymore for encryption
                    but still required to decrypt existing values for further re-encrypt.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="keyType">
        <xsd:sequence>
            <xsd:element name="password" type="xsd:token" minOccurs="1" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[
                        Password of the key. Required, but may be empty if the key is not protected.
                        If empty, then the keystore will be opened without a password.
                        When you set the value of this attribute like plaintext, system does the following:
                            1. Encrypt password with application-uniqueness symmetric key
                            2. Set encrypted value back to configuration xml
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="alias" type="xsd:ID" use="required">
            <xsd:annotation>
                <xsd:documentation>
                        Unique name of the key.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="deprecated" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Shows whether key is deprecated or not.
                    This attribute is set manually with 'true' if key shouldn't be used anymore for encryption
                    but still required to decrypt existing values for further re-encrypt.
                    By default is false. If value is not set to 'true' implicitly, the value is taken from the keystore.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="keyListType">
        <xsd:sequence>
            <xsd:element name="key" type="keyType" minOccurs="0" maxOccurs="unbounded">
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>


    <xsd:complexType name="listKeyStoreType">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="local-keystore" type="local-keystoreType">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies a local KeyStore, locates in file system where also locate application
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="remote-keystore" type="remote-keystoreType">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies a remote KeyStore
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="local-keystoreType" mixed="false">
        <xsd:annotation>
            <xsd:documentation>
                Keystores ensure the secure storage and management of private keys and secret key and trusted certificate authorities (CAs).
                Keystore locate on server where locate qubership application
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="keystoreType">
                <xsd:sequence>
                    <xsd:element name="location" type="xsd:token" minOccurs="1" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                <![CDATA[
                            The path and file name of the identity keystore.
                            The path name must be absolute.
                            Path example: <connection-url>/u02/qubership/toms/u214_a2_6307/my_test_keystore.ks</connection-url>
                        ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="keystore-type" type="xsd:token" minOccurs="1" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                <![CDATA[
                            JCA type for keystore, by that will be find provider that can managed specified file storage
                            facility for cryptographic keys and certificates. Generally, this is JKS.
                        ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="password" type="xsd:token" maxOccurs="1" minOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                <![CDATA[
                            Encrypted Password to unlock keystore. If empty or null, then the keystore will be opened without a password.
                            When you set the value of this attribute like plaintext, qubership does the following:
                            1. Encrypt password with application-uniqueness symmetric key
                            2. Set encrypted value back to configuration xml
                        ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="remote-keystoreType">
        <xsd:annotation>
            <xsd:documentation>
                Keystores ensure the secure storage and management of private keys and secret key and trusted certificate authorities (CAs).
                Keystore locate some remote server that allow in cluster application use same key
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="keystoreType">
                <xsd:sequence>
                    <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Not implemented yet!
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:any>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>