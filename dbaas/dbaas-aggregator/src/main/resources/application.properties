quarkus.package.jar.type=legacy-jar
quarkus.banner.enabled=false
quarkus.micrometer.export.prometheus.path=/prometheus
quarkus.devservices.enabled=false

cloud.microservice.namespace=${CLOUD_NAMESPACE:unknown}
cloud.microservice.cloudName=${CLOUD_PUBLIC_HOST:unknown}
cloud.microservice.name=${MICROSERVICE_NAME:dbaas-aggregator}
dbaas.production.mode=${PRODUCTION_MODE:true}
dbaas.paas.pod-name=${HOSTNAME:local-dev}
dbaas.adapter.addresses=${DBAAS_PREMATURE_REGISTRATION_ADAPTER_ADDRESSES:}
dbaas.security.users.configuration.location=${DBAAS_SECURITY_CONFIGURATION_LOCATION:/etc/dbaas/security}/users.json
dbaas.balancing.defaultPhysicalDatabasesDisabled=${DBAAS_DEFAULT_PHYSICAL_DATABASES_DISABLED:false}
dbaas.h2.sync.every=${DBAAS_H2_SYNC_EVERY_MILLISECONDS:600}

# Logging
quarkus.log.console.format=[%d{yyyy-MM-dd'T'HH:mm:ss.SSS}] [%-5p] [request_id=%X{requestId}] [tenant_id=%X{tenantId}] [thread=%t] [class=%c{1}] %s%e%n
quarkus.log.console.filter=dbaas-filter
quarkus.log.level=${LOG_LEVEL:INFO}
quarkus.log.category."com.netcracker.cloud".level=${DBAAS_LOG_LEVEL:INFO}
quarkus.log.category."org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl".level=WARN

# Global datasource-related configs
quarkus.datasource.metrics.enabled=true
quarkus.transaction-manager.default-transaction-timeout=30m
dbaas.datasource.jdbc.acquisition-timeout=10S
dbaas.datasource.jdbc.background-validation-interval=10S
#quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.log.bind-parameters=true
#quarkus.hibernate-orm.log.format-sql=false

# Default datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.max-size=25
quarkus.datasource.jdbc.acquisition-timeout=${dbaas.datasource.jdbc.acquisition-timeout}
quarkus.datasource.jdbc.background-validation-interval=${dbaas.datasource.jdbc.background-validation-interval}
quarkus.flyway.locations=db/migration/postgresql
quarkus.flyway.migrate-at-start=true
quarkus.flyway.repair-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.hibernate-orm.packages=com.netcracker.cloud.dbaas.entity.pg

# Process Engine datasource
quarkus.datasource.process-orchestrator.db-kind=postgresql
quarkus.datasource.process-orchestrator.jdbc.url=${quarkus.datasource.jdbc.url: }
quarkus.datasource.process-orchestrator.username=${quarkus.datasource.username: }
quarkus.datasource.process-orchestrator.password=${quarkus.datasource.password: }
quarkus.datasource.process-orchestrator.jdbc.max-size=25
quarkus.datasource.process-orchestrator.jdbc.acquisition-timeout=${dbaas.datasource.jdbc.acquisition-timeout}
quarkus.datasource.process-orchestrator.jdbc.background-validation-interval=${dbaas.datasource.jdbc.background-validation-interval}
quarkus.datasource.process-orchestrator.jdbc.transactions=disabled

# H2 datasource
quarkus.datasource.h2.db-kind=h2
quarkus.datasource.h2.jdbc.url=jdbc:h2:mem:dbaas;DB_CLOSE_DELAY=-1
quarkus.datasource.h2.jdbc.max-size=15
quarkus.datasource.h2.jdbc.transactions=xa
quarkus.datasource.h2.jdbc.acquisition-timeout=15S
quarkus.flyway.h2.locations=db/migration/h2
quarkus.flyway.h2.migrate-at-start=true
quarkus.flyway.h2.baseline-on-migrate=true
quarkus.hibernate-orm.h2.datasource=h2
quarkus.hibernate-orm.h2.packages=com.netcracker.cloud.dbaas.entity.h2

# In-memory DBaaS Users Authorization
quarkus.security.jdbc.enabled=true
quarkus.security.jdbc.principal-query.datasource=h2
quarkus.security.jdbc.principal-query.sql=SELECT u.password FROM users u WHERE u.username=?
quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
quarkus.security.jdbc.principal-query.roles.sql=SELECT r.role FROM users u, roles r WHERE u.username=? AND u.id = r.user_id
quarkus.security.jdbc.principal-query.roles.datasource=h2
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups

# Endpoints Authorization
quarkus.security.jaxrs.deny-unannotated-endpoints=true
quarkus.http.auth.policy.db-client-access.roles-allowed=DB_CLIENT
quarkus.http.auth.permission.logging-manager-list.paths=/q/logging-manager,/q/logging-manager/levels
quarkus.http.auth.permission.logging-manager-list.methods=GET
quarkus.http.auth.permission.logging-manager-list.policy=permit
quarkus.http.auth.permission.logging-manager-update.paths=/q/logging-manager
quarkus.http.auth.permission.logging-manager-update.methods=POST
quarkus.http.auth.permission.logging-manager-update.policy=db-client-access

# Open-API and Swagger
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui
quarkus.smallrye-openapi.path=/v3/api-docs
quarkus.smallrye-openapi.info-title=DBaaS Aggregator API
quarkus.smallrye-openapi.info-version=main
quarkus.smallrye-openapi.info-description=This documentation presents the REST API for the "Database as a Service" (DBaaS) component. \
  DBaaS acts as an aggregator for all adapters. It is designed to collect requests for managed databases and route them \
  to the appropriate adapter. DBaaS stores information about all databases used in a cloud project. These databases are \
  isolated by namespace. DBaaS uses a Classifier to identify databases within a cloud namespace. The Classifier includes \
  service-related information such as scope, microservice name, tenant ID, and namespace.

backup.aggregation.interval=1m
restore.aggregation.interval=1m
shedlock.defaults.lock-at-most-for=PT5M
retry.delay.seconds=${RETRY_DELAY_SECONDS:3}
retry.max=${RETRY_MAX:3}
retry.delay.track.ms=${RETRY_DELAY_TRACK_MS:3000}
retry.count=${RETRY_COUNT:20}
