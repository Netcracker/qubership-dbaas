quarkus.package.type=legacy-jar
quarkus.banner.enabled=false
#quarkus.hibernate-orm.log.sql=true
#quarkus.log.min-level=TRACE
#quarkus.hibernate-orm.log.bind-parameters=true
#uarkus.hibernate-orm.log.format-sql=false
cloud.microservice.namespace=${CLOUD_NAMESPACE:unknown}
cloud.microservice.cloudName=${CLOUD_PUBLIC_HOST:unknown}
cloud.microservice.name=${MICROSERVICE_NAME:dbaas-aggregator}
dbaas.production.mode=${PRODUCTION_MODE:true}
dbaas.paas.pod-name=${HOSTNAME:local-dev}
dbaas.adapter.addresses=${DBAAS_PREMATURE_REGISTRATION_ADAPTER_ADDRESSES:}
dbaas.security.users.configuration.location=${DBAAS_SECURITY_CONFIGURATION_LOCATION:/etc/dbaas/security}/users.json
dbaas.balancing.defaultPhysicalDatabasesDisabled=${DBAAS_DEFAULT_PHYSICAL_DATABASES_DISABLED:false}
dbaas.datasource.maximum-pool-size=25
dbaas.h2.sync.every=${DBAAS_H2_SYNC_EVERY_MILLISECONDS:600}

postgresql.host=${POSTGRES_HOST:localhost}
postgresql.port=${POSTGRES_PORT:5432}
postgresql.database=${POSTGRES_DATABASE:dbaas}
postgresql.user=${POSTGRES_USER:dbaas}
postgresql.password=${POSTGRES_PASSWORD:dbaas}
quarkus.transaction-manager.default-transaction-timeout=30m
quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.packages=org.qubership.cloud.dbaas.entity.pg
quarkus.datasource.jdbc.enable-metrics=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.devservices.enabled=false
quarkus.log.console.format=[%d{yyyy-MM-dd'T'HH:mm:ss.SSS}] [%-5p] [request_id=%X{requestId}] [tenant_id=%X{tenantId}] [thread=%t] [class=%c{1}] %s%e%n
quarkus.log.console.filter=dbaas-filter
quarkus.log.level=${LOG_LEVEL:INFO}
quarkus.log.category."org.qubership.cloud".level=${DBAAS_LOG_LEVEL:INFO}
quarkus.log.category."org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl".level=WARN
quarkus.vault.devservices.enabled=false
quarkus.keycloak.devservices.enabled=false

quarkus.datasource.h2.db-kind=h2
quarkus.datasource.h2.jdbc.url=jdbc:h2:mem:dbaas;DB_CLOSE_DELAY=-1
quarkus.datasource.h2.jdbc.max-size=15
quarkus.datasource.h2.jdbc.transactions=xa
quarkus.datasource.h2.jdbc.acquisition-timeout=15S
quarkus.flyway.h2.locations=db/migration/h2
quarkus.flyway.h2.baseline-on-migrate=true
quarkus.flyway.h2.migrate-at-start=true
quarkus.hibernate-orm.h2.datasource=h2
quarkus.hibernate-orm.h2.packages=org.qubership.cloud.dbaas.entity.h2

quarkus.micrometer.export.prometheus.path=/prometheus

# In-memory DBaaS Users Authorization Configuration
quarkus.security.jdbc.enabled=true
quarkus.security.jdbc.principal-query.datasource=h2
quarkus.security.jdbc.principal-query.sql=SELECT u.password FROM users u WHERE u.username=?
quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1

quarkus.security.jdbc.principal-query.roles.sql=SELECT r.role FROM users u, roles r WHERE u.username=? AND u.id = r.user_id
quarkus.security.jdbc.principal-query.roles.datasource=h2
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups

# Endpoints Authorization Configuration
quarkus.security.jaxrs.deny-unannotated-endpoints=true

quarkus.http.auth.policy.db-client-access.roles-allowed=DB_CLIENT

quarkus.http.auth.permission.logging-manager-list.paths=/q/logging-manager,/q/logging-manager/levels
quarkus.http.auth.permission.logging-manager-list.methods=GET
quarkus.http.auth.permission.logging-manager-list.policy=permit

quarkus.http.auth.permission.logging-manager-update.paths=/q/logging-manager
quarkus.http.auth.permission.logging-manager-update.methods=POST
quarkus.http.auth.permission.logging-manager-update.policy=db-client-access

# Open-API and Swagger
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui

quarkus.smallrye-openapi.path=/v3/api-docs
quarkus.smallrye-openapi.info-title=DBaaS Aggregator API
quarkus.smallrye-openapi.info-version=master
quarkus.smallrye-openapi.info-description=This documentation presents REST API for "Database as a Service" component. DBaaS is aggregator for all adapters. DBaaS is purposed to aggregate the requests for the administrated databases and send to the necessary adapter. DBaaS stores information about all databases used in cloud project. These databases are isolated by namespace. DBaaS uses Classifier for identification a database within one cloud namespace. Classifier indicates service information, such as scope, microserviceName, tenantId, namespace.